name: "Release"

on:
  push:
    tags:
      - "v*"

# For some reason, the builds like to be nested in extra nightfire-open
# directories, and I can't find a way to stop that from happening. Whatever.
# If this looks ugly, it's because I am very much not a CI guy.

jobs:
  check-release-notes:
    name: Check release notes are present
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # Check that there are release notes present for this tag.
    # If not, this should fail the step.
    - shell: bash
      run: stat ${{runner.workspace}}/nightfire-open/releases/${{github.ref_name}}/ReleaseNotes.md

  archive-content:
    name: Archive content
    runs-on: ubuntu-22.04
    needs: check-release-notes

    steps:
    # LFS is only enabled in this step, because it's expensive.
    # We create an archive of the content from here and
    # upload it, so that we can download it later and
    # sidestep GitHub's LFS bandwidth tracking.
    - uses: actions/checkout@v4
      with:
        repository: noodlecollie/nightfire-open-content
        lfs: true
        path: nightfire-open-content
        ssh-key: ${{ secrets.ACTIONS_SSH_PRIVATE_KEY }}

    - name: Checkout LFS objects
      run: cd "${{runner.workspace}}/nightfire-open/nightfire-open-content" && git lfs checkout

    - shell: bash
      run: |
        cd ${{runner.workspace}}
        tar -czvf nightfire-open_${{github.ref_name}}_lfscontent.tar.gz -C ${{runner.workspace}}/nightfire-open/nightfire-open-content/content .

    - name: Upload content
      uses: actions/upload-artifact@v4
      with:
        name: lfscontent
        path: ${{runner.workspace}}/nightfire-open_${{github.ref_name}}_lfscontent.tar.gz

  build-game-linux:
    name: Build game on Ubuntu
    runs-on: ubuntu-22.04
    needs: check-release-notes

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: sudo apt update && sudo apt install -y libsdl2-dev

    - name: Build
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{runner.workspace}}/build
        cc: gcc
        cxx: g++
        build-type: MinSizeRel
        target: install
        configure-options: -DCMAKE_INSTALL_PREFIX=install -DNF_AUTO_UPDATE_CONTENT_HASH=OFF

    - shell: bash
      run: |
        cd ${{runner.workspace}}
        tar -czvf nightfire-open_${{github.ref_name}}_game_linux.tar.gz -C ${{runner.workspace}}/nightfire-open/install/ .

    - name: Upload linux build
      uses: actions/upload-artifact@v4
      with:
        name: artefacts_game_linux
        path: ${{runner.workspace}}/nightfire-open_${{github.ref_name}}_game_linux.tar.gz

  build-dedicated-server-linux:
    name: Build dedicated server on Ubuntu
    runs-on: ubuntu-22.04
    needs: check-release-notes

    steps:
    # This does not use LFS because it's only for compiling code.
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: sudo apt update && sudo apt install -y libsdl2-dev

    - name: Build
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{runner.workspace}}/build
        cc: gcc
        cxx: g++
        build-type: MinSizeRel
        target: install
        configure-options: -DCMAKE_INSTALL_PREFIX=install -DNF_DEDICATED_SERVER=YES -DNF_AUTO_UPDATE_CONTENT_HASH=OFF

    - shell: bash
      run: |
        cd ${{runner.workspace}}
        tar -czvf nightfire-open_${{github.ref_name}}_dedicated_server_linux.tar.gz -C ${{runner.workspace}}/nightfire-open/install/ .

    - name: Upload linux build
      uses: actions/upload-artifact@v4
      with:
        name: artefacts_dedicated_server_linux
        path: ${{runner.workspace}}/nightfire-open_${{github.ref_name}}_dedicated_server_linux.tar.gz

  build-game-windows:
    name: Build game on Windows
    runs-on: windows-2022
    needs: check-release-notes

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{runner.workspace}}/build
        cc: cl
        cxx: cl
        build-type: MinSizeRel
        target: install
        configure-options: -DCMAKE_INSTALL_PREFIX=install -DNF_AUTO_UPDATE_CONTENT_HASH=OFF

    - name: Archive Release
      uses: thedoctor0/zip-release@0.7.1
      with:
        type: tar
        filename: nightfire-open_${{github.ref_name}}_game_windows.tar.gz
        directory: ${{runner.workspace}}/nightfire-open
        path: install

    - name: Upload Windows build
      uses: actions/upload-artifact@v4
      with:
        name: artefacts_game_windows
        path: ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_game_windows.tar.gz

  build-dedicated-server-windows:
    name: Build dedicated server on Windows
    runs-on: windows-2022
    needs: check-release-notes

    steps:
    # This does not use LFS because it's only for compiling code.
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{runner.workspace}}/build
        cc: cl
        cxx: cl
        build-type: MinSizeRel
        target: install
        configure-options: -DCMAKE_INSTALL_PREFIX=install -DNF_DEDICATED_SERVER=YES -DNF_AUTO_UPDATE_CONTENT_HASH=OFF

    - name: Archive Release
      uses: thedoctor0/zip-release@0.7.1
      with:
        type: tar
        filename: nightfire-open_${{github.ref_name}}_dedicated_server_windows.tar.gz
        directory: ${{runner.workspace}}/nightfire-open
        path: install

    - name: Upload Windows build
      uses: actions/upload-artifact@v4
      with:
        name: artefacts_dedicated_server_windows
        path: ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_dedicated_server_windows.tar.gz

  create-release:
    name: Create release
    runs-on: ubuntu-22.04
    needs: [archive-content, build-game-windows, build-game-linux, build-dedicated-server-windows, build-dedicated-server-linux]
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download LFS content
        uses: actions/download-artifact@v4
        with:
          name: lfscontent

      # We do this little dance to use the LFS content for all builds, which at the moment are all .tar.gz files.
      # We will then re-archive them later.
      # Windows paths are different because the zip process from the Windows step sucks, and can't produce
      # the file structure that we want within the archive.

      - name: Download Linux game artefacts
        uses: actions/download-artifact@v4
        with:
          name: artefacts_game_linux

      - shell: bash
        run: |
          cd ${{runner.workspace}}
          mkdir -p ${{runner.workspace}}/staging/linux_game

          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_game_linux.tar.gz -C ${{runner.workspace}}/staging/linux_game
          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_lfscontent.tar.gz -C ${{runner.workspace}}/staging/linux_game/nightfire-open
          ls ${{runner.workspace}}/staging/linux_game

          rm ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_game_linux.tar.gz

          # Archive the release
          tar -czvf nightfire-open_${{github.ref_name}}_game_linux.tar.gz -C ${{runner.workspace}}/staging/linux_game .
          rm -rf ${{runner.workspace}}/staging/linux_game

      - name: Download Linux dedicated server artefacts
        uses: actions/download-artifact@v4
        with:
          name: artefacts_dedicated_server_linux

      - shell: bash
        run: |
          cd ${{runner.workspace}}
          mkdir -p ${{runner.workspace}}/staging/linux_dedicated_server

          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_dedicated_server_linux.tar.gz -C ${{runner.workspace}}/staging/linux_dedicated_server
          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_lfscontent.tar.gz -C ${{runner.workspace}}/staging/linux_dedicated_server/nightfire-open
          ls ${{runner.workspace}}/staging/linux_dedicated_server

          rm ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_dedicated_server_linux.tar.gz

          # Archive the release
          tar -czvf nightfire-open_${{github.ref_name}}_dedicated_server_linux.tar.gz -C ${{runner.workspace}}/staging/linux_dedicated_server .
          rm -rf ${{runner.workspace}}/staging/linux_dedicated_server

      - name: Download Windows game artefacts
        uses: actions/download-artifact@v4
        with:
          name: artefacts_game_windows

      - shell: bash
        run: |
          cd ${{runner.workspace}}
          mkdir -p ${{runner.workspace}}/staging/windows_game

          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_game_windows.tar.gz -C ${{runner.workspace}}/staging/windows_game
          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_lfscontent.tar.gz -C ${{runner.workspace}}/staging/windows_game/install/nightfire-open
          ls ${{runner.workspace}}/staging/windows_game

          rm ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_game_windows.tar.gz

      - name: Archive Windows Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: zip
          filename: nightfire-open_${{github.ref_name}}_game_windows.zip
          directory: ${{runner.workspace}}/staging/windows_game/install

      - name: Download Windows dedicated server artefacts
        uses: actions/download-artifact@v4
        with:
          name: artefacts_dedicated_server_windows

      - shell: bash
        run: |
          cd ${{runner.workspace}}
          mkdir -p ${{runner.workspace}}/staging/windows_dedicated_server

          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_dedicated_server_windows.tar.gz -C ${{runner.workspace}}/staging/windows_dedicated_server
          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_lfscontent.tar.gz -C ${{runner.workspace}}/staging/windows_dedicated_server/install/nightfire-open
          ls ${{runner.workspace}}/staging/windows_dedicated_server

          rm ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_dedicated_server_windows.tar.gz

      - name: Archive Windows Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: zip
          filename: nightfire-open_${{github.ref_name}}_dedicated_server_windows.zip
          directory: ${{runner.workspace}}/staging/windows_dedicated_server/install

      - name: Create release
        uses: 'softprops/action-gh-release@v1'
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          name: Release ${{github.ref_name}}
          body_path: ${{runner.workspace}}/nightfire-open/releases/${{github.ref_name}}/ReleaseNotes.md
          generate_release_notes: true
          files:  |
            ${{runner.workspace}}/nightfire-open_${{github.ref_name}}_game_linux.tar.gz
            ${{runner.workspace}}/nightfire-open_${{github.ref_name}}_dedicated_server_linux.tar.gz
            ${{runner.workspace}}/staging/windows_game/install/nightfire-open_${{github.ref_name}}_game_windows.zip
            ${{runner.workspace}}/staging/windows_dedicated_server/install/nightfire-open_${{github.ref_name}}_dedicated_server_windows.zip
